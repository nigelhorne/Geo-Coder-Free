---

# https://github.com/AtomLinter/atom-linter-perlcritic/blob/master/.circleci/config.yml

# Couldn't automatically generate a config from your source code.
# This is a generic template to serve as a base for your custom config
# See: https://circleci.com/docs/configuration-reference
# Stacks detected: cicd:github-actions:.github/workflows
version: 2.1
jobs:
  test:
    docker:
      - image: cimg/base:stable

    steps:
      - checkout
      # Replace this with a real test runner invocation
      - run:
          name: Install Perl
          command: |
            sudo apt-get update && \
            sudo apt-get upgrade && \
            sudo apt-get install --assume-yes --quiet \
              --no-install-suggests --no-install-recommends \
              perl cpanminus
      - run:
          name: Perl version
          command: perl --version
      - run:
          name: App::cpanminus version
          command: cpanm --version
      - run:
          name: Prepare testing environment
          command: sudo cpanm -iqn Test::Most Test::Needs
      - run:
          name: Install dependancies
          command: sudo cpanm -iqn --installdeps .
      - run:
          name: Make Module
          command: sudo chown -R circleci . && perl Makefile.PL && make
      - run:
          name: Run tests
          environment:
            # PATH: ~/perl5/bin:/bin:/usr/bin
            AUTOMATED_TESTING: 1
            AUTHOR_TESTING: 1
          # command: echo 'replace me with real tests!' && false
          command: |
            make test
            # cover -test
            # cover -report codecov
  build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      # Replace this with steps to build a package, or executable
      - run:
          name: Build an artifact
          command: touch example.txt
      - store_artifacts:
          path: example.txt
  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'
      - run:
          name: found github actions config
          command: ':'
workflows:
  test:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - test
